/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.sages.schema;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Bank Transaction (union type) */
@org.apache.avro.specific.AvroGenerated
public class Transaction3 extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6322253702845866742L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Transaction3\",\"namespace\":\"com.sages.schema\",\"doc\":\"Bank Transaction (union type)\",\"fields\":[{\"name\":\"transactionId\",\"type\":\"string\"},{\"name\":\"transactionDescription\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"currency\",\"type\":[\"string\",\"null\"],\"default\":\"USD\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Transaction3> ENCODER =
      new BinaryMessageEncoder<Transaction3>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Transaction3> DECODER =
      new BinaryMessageDecoder<Transaction3>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Transaction3> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Transaction3> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Transaction3> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Transaction3>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Transaction3 to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Transaction3 from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Transaction3 instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Transaction3 fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.CharSequence transactionId;
   private java.lang.CharSequence transactionDescription;
   private java.lang.CharSequence currency;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Transaction3() {}

  /**
   * All-args constructor.
   * @param transactionId The new value for transactionId
   * @param transactionDescription The new value for transactionDescription
   * @param currency The new value for currency
   */
  public Transaction3(java.lang.CharSequence transactionId, java.lang.CharSequence transactionDescription, java.lang.CharSequence currency) {
    this.transactionId = transactionId;
    this.transactionDescription = transactionDescription;
    this.currency = currency;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return transactionId;
    case 1: return transactionDescription;
    case 2: return currency;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: transactionId = (java.lang.CharSequence)value$; break;
    case 1: transactionDescription = (java.lang.CharSequence)value$; break;
    case 2: currency = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'transactionId' field.
   * @return The value of the 'transactionId' field.
   */
  public java.lang.CharSequence getTransactionId() {
    return transactionId;
  }


  /**
   * Sets the value of the 'transactionId' field.
   * @param value the value to set.
   */
  public void setTransactionId(java.lang.CharSequence value) {
    this.transactionId = value;
  }

  /**
   * Gets the value of the 'transactionDescription' field.
   * @return The value of the 'transactionDescription' field.
   */
  public java.lang.CharSequence getTransactionDescription() {
    return transactionDescription;
  }


  /**
   * Sets the value of the 'transactionDescription' field.
   * @param value the value to set.
   */
  public void setTransactionDescription(java.lang.CharSequence value) {
    this.transactionDescription = value;
  }

  /**
   * Gets the value of the 'currency' field.
   * @return The value of the 'currency' field.
   */
  public java.lang.CharSequence getCurrency() {
    return currency;
  }


  /**
   * Sets the value of the 'currency' field.
   * @param value the value to set.
   */
  public void setCurrency(java.lang.CharSequence value) {
    this.currency = value;
  }

  /**
   * Creates a new Transaction3 RecordBuilder.
   * @return A new Transaction3 RecordBuilder
   */
  public static com.sages.schema.Transaction3.Builder newBuilder() {
    return new com.sages.schema.Transaction3.Builder();
  }

  /**
   * Creates a new Transaction3 RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Transaction3 RecordBuilder
   */
  public static com.sages.schema.Transaction3.Builder newBuilder(com.sages.schema.Transaction3.Builder other) {
    if (other == null) {
      return new com.sages.schema.Transaction3.Builder();
    } else {
      return new com.sages.schema.Transaction3.Builder(other);
    }
  }

  /**
   * Creates a new Transaction3 RecordBuilder by copying an existing Transaction3 instance.
   * @param other The existing instance to copy.
   * @return A new Transaction3 RecordBuilder
   */
  public static com.sages.schema.Transaction3.Builder newBuilder(com.sages.schema.Transaction3 other) {
    if (other == null) {
      return new com.sages.schema.Transaction3.Builder();
    } else {
      return new com.sages.schema.Transaction3.Builder(other);
    }
  }

  /**
   * RecordBuilder for Transaction3 instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Transaction3>
    implements org.apache.avro.data.RecordBuilder<Transaction3> {

    private java.lang.CharSequence transactionId;
    private java.lang.CharSequence transactionDescription;
    private java.lang.CharSequence currency;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.sages.schema.Transaction3.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.transactionId)) {
        this.transactionId = data().deepCopy(fields()[0].schema(), other.transactionId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.transactionDescription)) {
        this.transactionDescription = data().deepCopy(fields()[1].schema(), other.transactionDescription);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.currency)) {
        this.currency = data().deepCopy(fields()[2].schema(), other.currency);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing Transaction3 instance
     * @param other The existing instance to copy.
     */
    private Builder(com.sages.schema.Transaction3 other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.transactionId)) {
        this.transactionId = data().deepCopy(fields()[0].schema(), other.transactionId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.transactionDescription)) {
        this.transactionDescription = data().deepCopy(fields()[1].schema(), other.transactionDescription);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.currency)) {
        this.currency = data().deepCopy(fields()[2].schema(), other.currency);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'transactionId' field.
      * @return The value.
      */
    public java.lang.CharSequence getTransactionId() {
      return transactionId;
    }


    /**
      * Sets the value of the 'transactionId' field.
      * @param value The value of 'transactionId'.
      * @return This builder.
      */
    public com.sages.schema.Transaction3.Builder setTransactionId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.transactionId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'transactionId' field has been set.
      * @return True if the 'transactionId' field has been set, false otherwise.
      */
    public boolean hasTransactionId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'transactionId' field.
      * @return This builder.
      */
    public com.sages.schema.Transaction3.Builder clearTransactionId() {
      transactionId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'transactionDescription' field.
      * @return The value.
      */
    public java.lang.CharSequence getTransactionDescription() {
      return transactionDescription;
    }


    /**
      * Sets the value of the 'transactionDescription' field.
      * @param value The value of 'transactionDescription'.
      * @return This builder.
      */
    public com.sages.schema.Transaction3.Builder setTransactionDescription(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.transactionDescription = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'transactionDescription' field has been set.
      * @return True if the 'transactionDescription' field has been set, false otherwise.
      */
    public boolean hasTransactionDescription() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'transactionDescription' field.
      * @return This builder.
      */
    public com.sages.schema.Transaction3.Builder clearTransactionDescription() {
      transactionDescription = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'currency' field.
      * @return The value.
      */
    public java.lang.CharSequence getCurrency() {
      return currency;
    }


    /**
      * Sets the value of the 'currency' field.
      * @param value The value of 'currency'.
      * @return This builder.
      */
    public com.sages.schema.Transaction3.Builder setCurrency(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.currency = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'currency' field has been set.
      * @return True if the 'currency' field has been set, false otherwise.
      */
    public boolean hasCurrency() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'currency' field.
      * @return This builder.
      */
    public com.sages.schema.Transaction3.Builder clearCurrency() {
      currency = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Transaction3 build() {
      try {
        Transaction3 record = new Transaction3();
        record.transactionId = fieldSetFlags()[0] ? this.transactionId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.transactionDescription = fieldSetFlags()[1] ? this.transactionDescription : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.currency = fieldSetFlags()[2] ? this.currency : (java.lang.CharSequence) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Transaction3>
    WRITER$ = (org.apache.avro.io.DatumWriter<Transaction3>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Transaction3>
    READER$ = (org.apache.avro.io.DatumReader<Transaction3>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.transactionId);

    if (this.transactionDescription == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.transactionDescription);
    }

    if (this.currency == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      out.writeString(this.currency);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.transactionId = in.readString(this.transactionId instanceof Utf8 ? (Utf8)this.transactionId : null);

      if (in.readIndex() != 1) {
        in.readNull();
        this.transactionDescription = null;
      } else {
        this.transactionDescription = in.readString(this.transactionDescription instanceof Utf8 ? (Utf8)this.transactionDescription : null);
      }

      if (in.readIndex() != 0) {
        in.readNull();
        this.currency = null;
      } else {
        this.currency = in.readString(this.currency instanceof Utf8 ? (Utf8)this.currency : null);
      }

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.transactionId = in.readString(this.transactionId instanceof Utf8 ? (Utf8)this.transactionId : null);
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.transactionDescription = null;
          } else {
            this.transactionDescription = in.readString(this.transactionDescription instanceof Utf8 ? (Utf8)this.transactionDescription : null);
          }
          break;

        case 2:
          if (in.readIndex() != 0) {
            in.readNull();
            this.currency = null;
          } else {
            this.currency = in.readString(this.currency instanceof Utf8 ? (Utf8)this.currency : null);
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










